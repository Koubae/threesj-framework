import * as THREE from 'three';

import game from "../../../minimal";
import {MAP_DATA_01, MAP_DATA_02} from "./map_data_01.js";

export default function demo() {
    const {
        animate,
        camera,
        controls,
        renderer,
        scene,
        setGameLoop,
        loadTexture,
    } = game({color: "black", controls: true, freeFlight: true});

    camera.position.set(1, 300, 500);
    camera.lookAt(0, 0, 0);

    function createTerrain() {
        let scale = new THREE.Vector3(70.0, 5.0, 70.0);
        let subDivisions = 20;
        const texturePath = "/assets/textures/grass";

        const threeFloor = new THREE.Mesh(
            new THREE.PlaneGeometry(scale.x, scale.z, subDivisions, subDivisions),
            new THREE.MeshStandardMaterial({
                map: loadTexture(`${texturePath}/Grass_005_BaseColor.jpg`),
                normalMap: loadTexture(`${texturePath}/Grass_005_Normal.jpg`),
                aoMap: loadTexture(`${texturePath}/Grass_005_AmbientOcclusion.jpg`),
                roughnessMap: loadTexture(`${texturePath}/Grass_005_Roughness.jpg`),
                roughness: 0.6
            })
        );
        threeFloor.rotateX(-Math.PI / 2);
        threeFloor.receiveShadow = true;
        threeFloor.castShadow = true;
        scene.add(threeFloor);

        // Create Height - Map
        const vertices = threeFloor.geometry.attributes.position.array;
        let mapData = new Float32Array([0.6753973000197544, 4.331089468838133, 1.860402518121912, 4.495014030873596, 0.19258265220187087, 1.216145136368954, 0.7964965935764812, 4.445225478527356, 2.0354409976539034, 1.7111037824073039, 1.4613363511615551, 3.6551186914735596, 4.3396264705396534, 2.7857964485053497, 3.7480873510816344, 4.109605189589043, 4.7779392828221, 0.45651619532258714, 1.6624747950075185, 1.6400359586822328, 0.6442958516057085, 0.23032042361967764, 4.9216360692292564, 1.8253406486490293, 2.577524995666053, 3.8336791055164388, 2.0844136145367282, 2.036999646661438, 1.2091773828428865, 0.08983942301287351, 3.3840084210882604, 1.0044069603490136, 2.8196474074518423, 0.6107705189636059, 0.806819201551951, 4.861163006609238, 4.087793125661966, 0.1415695275142398, 2.871426090553503, 1.5078939854206863, 0.8856950906317551, 0.3464315068016438, 3.719640263360604, 0.2837582528631932, 1.9034525800497888, 1.1468970544852901, 1.7649502846254261, 0.36461184877186303, 2.4817488805268875, 1.1743322117021675, 2.7793290369744943, 4.06106845574133, 2.634758079855169, 2.362555164540654, 1.677364006185288, 0.18326851220208273, 2.554976117377095, 4.3475686508712625, 4.952154850806082, 1.4433911204061527, 3.214981609752845, 3.9900995703313957, 0.9257590246286845, 2.6565798397919256, 2.5123596581776093, 2.96784541982243, 0.7265163507812372, 4.6172280043704985, 2.3103132936850814, 2.2214889079007127, 2.3239064955976216, 4.755730892523931, 1.8230001570437315, 1.167836728693628, 2.995351599323637, 2.07231095805388, 4.658619885698172, 1.8657132416517204, 3.697739675637969, 4.8492163857329, 2.7982199757530974, 3.298801821195949, 0.9799960935877189, 3.3863791453343834, 0.4890970875463174, 4.890590306430614, 0.6209453957874961, 0.7335841818628358, 2.6306902551080693, 1.759303885098042, 3.5146626473588585, 3.6899698867059243, 2.9752906176099145, 2.7054271473368967, 3.3068725104517718, 1.490976176561352, 0.47847986723040414, 4.296172747111137, 3.778874447595231, 2.9696689715456213, 3.074744525622417, 1.200465441795161, 4.102839142881577, 3.939358213625614, 4.083183944035896, 2.1130831504377445, 1.8397856853787582, 3.5664505736315033, 3.397511220029716, 3.09899943363323, 4.572110679885528, 0.646401533847773, 4.411669521638735, 4.763996270023206, 4.118759156302606, 1.4691123049004657, 3.3734572677230554, 4.116543390030784, 1.365449407673895, 1.0704188067018143, 4.897773226323469, 2.8083136009377423, 3.842925053540005, 4.075430156916321, 2.052122621865494, 2.4145778400911984, 2.8704331122063276, 2.4400535746126044, 1.3566974639979479, 3.066946041146757, 3.490475254816401, 3.4225564844620697, 3.173054638515013, 1.930973461865333, 0.32273698091610015, 3.947225729125976, 4.292107730398758, 4.9789541754273685, 1.477320235255863, 1.2955613312679082, 4.575422207322198, 3.227817937227207, 4.194400887307107, 1.6085056454084667, 2.623862341055464, 2.4936996325742538, 2.2137240569777483, 3.3836302903661704, 4.142894035467149, 3.892179430881053, 3.7617836011730477, 2.4029494000464653, 1.7301438958758637, 3.6984058828030864, 0.6773871621569827, 4.764628038570246, 1.9461873938853476, 4.0751998280709145, 2.6320513094577285, 2.507335195184278, 3.2469461005849656, 2.174776233440268, 0.7176583300380679, 0.1514901448433753, 3.840851544444339, 4.734518311075938, 3.5503625786439343, 0.8961157981286916, 2.4094647106924705, 1.8548134352957009, 4.497987135322265, 0.49162344143054315, 4.803643244110422, 3.159220917679444, 3.185395935764641, 1.4884269365391218, 4.8998269022480425, 3.42486229083614, 1.9511074334033136, 4.84924655964674, 2.7386853825856363, 1.4090120435654985, 0.5080399725275886, 3.773201614470958, 2.584823560222691, 0.5490388557586368, 1.3507122614244438, 3.702595538054196, 4.221979628243252, 2.957196404102649, 1.4135110513240867, 1.1513546890290938, 1.7495979131620993, 3.68282063678083, 3.601926738507811, 3.508441728734693, 0.39294669645243085, 4.597983722721402, 1.8639931854721388, 3.1860257881177967, 4.38415113625531, 4.810318659803201, 0.22505733866942212, 1.7585051995478929, 4.951597154359585, 2.4133318441768226, 0.022807053437522984, 2.7812413019345246, 2.859049341330434, 3.3069040477981866, 3.4313608439887027, 0.19888543385548407, 2.786827299580523, 4.479679760625142, 4.964425086021312, 3.525394764089188, 3.2794420891513183, 3.8596512684393507, 4.060248492418464, 1.8795003166119795, 1.1311589296069202, 3.1647586939386056, 3.2054176324801125, 0.13170964470715418, 3.9599296925547236, 1.9219273700048711, 0.19706185205806526, 2.899600450469688, 2.4530789247455442, 3.016174164465638, 2.9950690306615084, 3.3563068312300324, 0.3225640053927742, 0.2459727289078517, 2.7031531286471813, 3.5827292915366282, 1.4540804591065837, 1.9310835141166844, 3.268433045021955, 3.7452312828280943, 4.39714593697783, 2.311267368813112, 4.930704242245227, 1.7005903026705216, 1.7711403778553874, 1.0945988183101962, 1.666341839729063, 2.5100759721735684, 2.414919627056395, 1.6790145956413571, 0.09295157288279787, 3.698554486052233, 1.7350464204491938, 1.7371127645985878, 4.263589727090197, 0.5344406640716176, 4.116609486060238, 0.5018279090815558, 4.6872408431229715, 1.507453676302064, 2.549691411029551, 4.023321724748493, 2.8878821054293526, 4.845309639042444, 1.0353760654135207, 0.6588769595313071, 0.6679721649987336, 4.475988378555129, 2.9596895460907504, 0.39296360057465896, 1.2117959103945215, 3.1684795784124855, 4.175498728824898, 3.57965176702134, 2.1408314685739827, 3.774034262350623, 0.7407047560453034, 0.33019020859778814, 1.4567022088184234, 4.913079758361572, 4.477701960078766, 4.669006050408411, 1.2569794852063692, 0.03213327054164383, 0.5872698474612353, 1.5462510358498132, 4.4079754943923115, 2.7934691554682405, 4.895783693039222, 4.878367838551981, 0.3630445692214118, 0.041217383900932214, 1.0836471710079998, 2.6946957945367105, 0.47315767079192383, 0.6876533988541861, 0.149742275723449, 4.901658002166264, 1.4790445431353483, 4.07976172827168, 2.6552135237451555, 3.019676395467557, 4.991040835304953, 0.38800682292461863, 0.5001179172736009, 1.7283504626817403, 1.75198461814411, 0.1906964072503664, 0.6752799590909586, 3.0386553577893394, 3.4535950354387235, 4.124796613877642, 0.5466680662749196, 3.3079197702019503, 2.3551528180939703, 1.1725676312608024, 2.6756886355036134, 1.5790107182601805, 1.5357705473618948, 1.8543935958306412, 2.068187119753225, 0.5602211396829876, 4.5285296507857336, 4.662762160668862, 0.7236595232861337, 3.1434912112515763, 1.3111157554979458, 4.99396526428322, 2.4704599804284797, 0.4764797298666362, 2.927990486147316, 3.7938149231230773, 3.984958317185873, 1.6837551250342582, 2.0121012728591197, 2.6603050451212855, 2.100226466498806, 3.1014375226114144, 3.28701019793346, 3.7834131290259094, 0.404800036838584, 1.293083385990429, 4.765994232783975, 3.0529953836801607, 0.9632306507121235, 4.5605583298443815, 2.7253249267858237, 2.1188473475924994, 1.8654288951816445, 4.967136793282839, 1.3731718804908977, 2.9220925340344825, 2.1675597964670246, 4.783943353882082, 2.3625455490874447, 1.8289684546659557, 2.3937414314967738, 1.0745378958395702, 2.665202152387715, 3.7652577807888887, 2.172537764553937, 2.499003742527668, 2.6225174139896277, 2.340747353816886, 0.06959267985181372, 0.9098942529111048, 1.4166646851797415, 0.283895504770722, 4.824702592320216, 2.6515277234223076, 4.126489786413986, 3.4161948842859813, 0.9352725633885733, 2.1584123014811043, 1.1232128429924726, 4.301750380313253, 4.848917933685859, 3.225857476167682, 0.41250385492113795, 3.5588595933425227, 3.8118183762874915, 4.743558774060787, 0.8301363624752534, 1.0199181555954668, 4.360616705747072, 1.0497574040481177, 0.5810630342076517, 2.9034096064419086, 2.3457307904956775, 4.714583887732656, 3.7897253016653494, 0.4594499216475295, 1.8095537656801042, 4.088105505435175, 4.42656245264955, 1.159063430198245, 2.057980965778918, 2.158628920635489, 3.122179621648677, 2.9229067483057554, 1.390694976785369, 1.0908238709181166, 4.668834672275069, 4.6453989893721435, 1.05557276993758, 3.090481227043422, 0.8240312918149667, 3.2662240554197126, 2.264763369907459, 0.9038235001069467, 0.9210952743641565, 1.4249984935819149, 3.3075213772511116, 3.1775973534231023, 0.8197050304119802, 3.7442970892778122, 3.7113537397281755, 1.9653629890996056, 4.892997388102758, 3.2502764196691505, 0.1380779509590524, 2.306682505358049, 0.5781309432693948, 3.620038575410992, 1.995072473007597, 2.9883546748548255, 4.420904362328151, 0.5670444559068616, 0.45243052140705065, 0.6454041271608713, 2.9966583152350736, 0.39928215241679665, 0.26419690595797685, 4.0413511653456515, 1.9559338834476148, 3.2796892507403355, 4.03813997138089, 3.347135578125979, 1.877129297439618, 1.5128157595999276, 1.5548682304756039]);
        let y = 0;
        for (let i = 0; i < vertices.length; i += 3) {
            vertices[i + 2] = mapData[y];
            y++;
        }
        threeFloor.geometry.computeVertexNormals();

    }

    function createTerrainWithData01(full = false) {
        let scale = new THREE.Vector3(1000, 5.0, 1000);
        let subDivisions = 50;
        const threeFloor = new THREE.Mesh(
            new THREE.PlaneGeometry(scale.x, scale.z, subDivisions, subDivisions),
            new THREE.MeshStandardMaterial({
                color: "green",
                side: THREE.FrontSide,
                wireframe: !full,
            })
        );
        threeFloor.rotateX(-Math.PI / 2);
        threeFloor.receiveShadow = true;
        threeFloor.castShadow = true;
        scene.add(threeFloor);

        // Extract Height - Map
        let mapData = new Float32Array(Object.values(MAP_DATA_01));
        threeFloor.geometry.setAttribute('position', new THREE.BufferAttribute(mapData, 3));
        threeFloor.geometry.computeVertexNormals();
        threeFloor.geometry.attributes.position.needsUpdate = true;

    }

    function createTerrainWithDataBuildFromScratch(full = false) {
        let geometry = new THREE.BufferGeometry();
        let heighMap = new Float32Array(Object.values(MAP_DATA_01));

        // Normals Vectors
        const normals = new Float32Array(heighMap.length);
        const point_a = new THREE.Vector3();
        const point_b = new THREE.Vector3();
        const point_c = new THREE.Vector3();

        const cb = new THREE.Vector3();
        const ab = new THREE.Vector3();
        for (let i = 0; i < heighMap.length; i += 9) {
            // flat face normals
            point_a.set(heighMap[i], heighMap[i + 1], heighMap[i + 2]);
            point_b.set(heighMap[i + 3], heighMap[i + 4], heighMap[i + 5]);
            point_c.set(heighMap[i + 6], heighMap[i + 7], heighMap[i + 8]);

            cb.subVectors(point_c, point_b);
            ab.subVectors(point_a, point_b);
            cb.cross(ab);
            cb.normalize();

            const normal_x = cb.x;
            const normal_y = cb.y;
            const normal_z = cb.z;

            normals[i] = normal_x;
            normals[i + 1] = normal_y;
            normals[i + 2] = normal_z;

            normals[i + 3] = normal_x;
            normals[i + 4] = normal_y;
            normals[i + 5] = normal_z;

            normals[i + 6] = normal_x;
            normals[i + 7] = normal_y;
            normals[i + 8] = normal_z;

        }

        geometry.setAttribute('position', new THREE.BufferAttribute(heighMap, 3));
        geometry.setAttribute('normal', new THREE.BufferAttribute(normals, 3));  // normals or colors not working :/
        geometry.computeBoundingSphere();
        const threeFloor = new THREE.Mesh(
            geometry,
            new THREE.MeshStandardMaterial({
                color: "green",
                side: THREE.FrontSide,
                wireframe: !full,
            })
        );
        threeFloor.rotateX(-Math.PI / 2);
        threeFloor.geometry.computeVertexNormals();
        threeFloor.geometry.attributes.position.needsUpdate = true;
        threeFloor.receiveShadow = true;
        threeFloor.castShadow = true;
        scene.add(threeFloor);

    }

    function createTerrainWithDataBuildFromScratchFullGeometry(full = false) {
        let geometry = new THREE.BufferGeometry();

        let indices = Object.values(MAP_DATA_02.index.array);
        let heighMap = new Float32Array(Object.values(MAP_DATA_02.position.array));
        let normalMap = new Float32Array(Object.values(MAP_DATA_02.normal.array));
        let uv = new Float32Array(Object.values(MAP_DATA_02.uv.array));

        geometry.setIndex(indices);
        geometry.setAttribute('position', new THREE.BufferAttribute(heighMap, 3));
        geometry.setAttribute('normal', new THREE.BufferAttribute(normalMap, 3));  // normals or colors not working :/
        geometry.setAttribute('uv', new THREE.BufferAttribute(uv, 3));  // normals or colors not working :/
        geometry.computeBoundingSphere();
        const threeFloor = new THREE.Mesh(
            geometry,
            new THREE.MeshStandardMaterial({
                color: "green",
                side: THREE.FrontSide,
                wireframe: !full,
            })
        );
        threeFloor.rotateX(-Math.PI / 2);
        threeFloor.geometry.computeVertexNormals();
        threeFloor.geometry.attributes.position.needsUpdate = true;
        threeFloor.receiveShadow = true;
        threeFloor.castShadow = true;
        scene.add(threeFloor);

    }

    // createTerrain();
    // createTerrainWithData01(true);
    // createTerrainWithDataBuildFromScratch(true);
    createTerrainWithDataBuildFromScratchFullGeometry(true);


    const geometry = new THREE.BoxGeometry(1, 1, 1);
    const material = new THREE.MeshLambertMaterial({color: 0x00ff00});
    const cube = new THREE.Mesh(geometry, material);
    cube.position.set(0, 10, 0);
    scene.add(cube);

    setGameLoop((delta) => {
    });

    animate(0);

}